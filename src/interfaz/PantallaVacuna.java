    /*
    * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
    * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
    */
    package interfaz;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import logica.Paciente;
import logica.Vacuna;

/**
     *
     * @author irvin
     */
    public class PantallaVacuna extends javax.swing.JFrame {

        /**
         * Creates new form PantallaVacuna
         */
        public PantallaVacuna() {
            initComponents();
            cargarYMostrarVacunasDesdeCSV("vacunas.csv");
            llenarComboBoxPacientes();
            this.setLocationRelativeTo(null);//centrar el jframe
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        vacunas_jTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxPacientes = new javax.swing.JComboBox<>();
        registrar_btn = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        vacunas_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(vacunas_jTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mascotas Vacunadas", jPanel1);

        jLabel1.setText("Fecha de Vacuna:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre de Vacuna:");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Paciente");

        jComboBoxPacientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        registrar_btn.setText("Registrar");
        registrar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registrar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxPacientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(367, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(registrar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registrar Nueva Vacuna", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jTextField1ActionPerformed

        private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jTextField2ActionPerformed

    private void registrar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrar_btnActionPerformed
        // TODO add your handling code here:
        try {
            String fechaVacuna = jTextField1.getText();
        String nombreVacuna = jTextField2.getText();
        int idPaciente = Integer.parseInt(jComboBoxPacientes.getSelectedItem().toString());
        if (fechaVacuna.isEmpty() || nombreVacuna.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese todos los datos.", 
            "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Vacuna vacuna = new Vacuna(fechaVacuna, nombreVacuna, idPaciente);
        guardarVacunaEnCSV(vacuna, "vacunas.csv");
            
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(this, "Error al registrar la vacuna.");
        }
        
    }//GEN-LAST:event_registrar_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cargarYMostrarVacunasDesdeCSV("vacunas.csv");
    }//GEN-LAST:event_jButton1ActionPerformed

        // Este método carga las vacunas desde el archivo CSV y las muestra en la jTable

    private void cargarYMostrarVacunasDesdeCSV(String nombreArchivo) {
        // Cargar vacunas desde el archivo CSV
        List<Vacuna> vacunas = cargarVacunasDesdeCSV(nombreArchivo);

        // Mostrar vacunas en la jTable
        mostrarVacunasEnJTable(vacunas);
    }

    // Este método toma una lista de vacunas y las muestra en la jTable
    private void mostrarVacunasEnJTable(List<Vacuna> vacunas) {
        DefaultTableModel tableModel = new DefaultTableModel();

        // Definir las columnas
        String[] columnNames = {"Fecha de Vacuna", "Nombre de Vacuna", "ID Paciente"};
        tableModel.setColumnIdentifiers(columnNames);

        // Agregar filas al modelo de la tabla
        for (Vacuna vacuna : vacunas) {
            Object[] rowData = {
                vacuna.getFechaVacuna(),
                vacuna.getNombreVacuna(),
                vacuna.getidPaciente()  
            };
            tableModel.addRow(rowData);
        }

        // Establecer el modelo de la tabla
        vacunas_jTable.setModel(tableModel);  // Ajusta el nombre de tu jTable según tu código
    }

    // Este método carga las vacunas desde el archivo CSV y las retorna como una lista
    private List<Vacuna> cargarVacunasDesdeCSV(String nombreArchivo) {
        List<Vacuna> vacunas = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(nombreArchivo))) {
            // Omitir la primera línea (encabezados)
            reader.readLine();

            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] campos = linea.split(",");
                String fechaVacuna = campos[0];
                String nombreVacuna = campos[1];
                int idPaciente = Integer.parseInt(campos[2]);

                // Crear el objeto Vacuna y agregarlo a la lista
                Vacuna vacuna = new Vacuna(fechaVacuna, nombreVacuna, idPaciente);
                vacunas.add(vacuna);
            }

        } catch (IOException | NumberFormatException e) {
            // Manejar las excepciones apropiadamente, por ejemplo, mostrar un mensaje de error al usuario
            e.printStackTrace();
        }

        return vacunas;
    }

    private void llenarComboBoxPacientes() {
        // Cargar la lista de pacientes desde el archivo "pacientes.csv"
        List<Paciente> pacientes = cargarPacientesDesdeCSV("pacientes.csv");

        // Crear un modelo para el JComboBox
        DefaultComboBoxModel<String> modeloComboBox = new DefaultComboBoxModel<>();

        // Llenar el modelo con los IDs de los pacientes convertidos a String
        for (Paciente paciente : pacientes) {
            modeloComboBox.addElement(String.valueOf(paciente.getId()));
        }

        // Establecer el modelo en el JComboBox
        jComboBoxPacientes.setModel(modeloComboBox);
    }

    private List<Paciente> cargarPacientesDesdeCSV(String nombreArchivo) {
        List<Paciente> pacientes = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(nombreArchivo))) {
            String linea;
            boolean primeraLinea = true; // Para omitir la primera línea (encabezados)
            while ((linea = reader.readLine()) != null) {
                if (primeraLinea) {
                    primeraLinea = false;
                    continue;
                }

                String[] campos = linea.split(",");
                int idPaciente = Integer.parseInt(campos[0]);
                String nombre = campos[1];
                int edad = Integer.parseInt(campos[2]);
                double precio = Double.parseDouble(campos[3]);
                double descuento = Double.parseDouble(campos[4]);
                String especie = campos[5];
                String dueno = campos[6];
                String raza = campos[7];

                // Crear el objeto Paciente y agregarlo a la lista
                Paciente paciente = new Paciente(idPaciente, nombre, edad, precio, descuento, especie, dueno, raza);
                pacientes.add(paciente);
            }

        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }

        return pacientes;
    }

    private void guardarVacunaEnCSV(Vacuna vacuna, String nombreArchivo) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo, true))) {
            // Escribir la nueva vacuna en el archivo CSV
            writer.write(vacuna.getFechaVacuna() + "," + vacuna.getNombreVacuna() + "," + vacuna.getidPaciente());
            writer.newLine();

            // Mostrar un mensaje de éxito o realizar otras acciones después de guardar
            JOptionPane.showMessageDialog(this, "Vacuna registrada exitosamente.");

        } catch (IOException e) {
            // Manejar las excepciones apropiadamente, por ejemplo, mostrar un mensaje de error al usuario
            e.printStackTrace();
        }
    }



        /**
         * @param args the command line arguments
         */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBoxPacientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton registrar_btn;
    private javax.swing.JTable vacunas_jTable;
    // End of variables declaration//GEN-END:variables
    }
